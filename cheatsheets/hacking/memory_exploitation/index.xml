<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Memory Exploitation on Ceso Adventures</title><link>https://ceso.github.io/cheatsheets/hacking/memory_exploitation/</link><description>Recent content in Memory Exploitation on Ceso Adventures</description><generator>Hugo</generator><language>en-gb</language><lastBuildDate>Fri, 03 Oct 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://ceso.github.io/cheatsheets/hacking/memory_exploitation/index.xml" rel="self" type="application/rss+xml"/><item><title>(Simple) Buffer Overflow (32 bits, NO ASLR and NO DEP)</title><link>https://ceso.github.io/cheatsheets/hacking/memory_exploitation/simple_buffer_overflow/</link><pubDate>Fri, 03 Oct 2025 00:00:00 +0000</pubDate><guid>https://ceso.github.io/cheatsheets/hacking/memory_exploitation/simple_buffer_overflow/</guid><description>&lt;ul&gt;
&lt;li&gt;0 - Crash the application&lt;/li&gt;
&lt;li&gt;1 - Fuzzing (find aprox number of bytes where the crash took place)&lt;/li&gt;
&lt;li&gt;2 - Find offset&lt;/li&gt;
&lt;li&gt;3 - EIP control&lt;/li&gt;
&lt;li&gt;4 - Check for enough space on buffer&lt;/li&gt;
&lt;li&gt;5 - Badchars counting&lt;/li&gt;
&lt;li&gt;6 - Find return address (JMP ESP)&lt;/li&gt;
&lt;li&gt;7 - Create payload&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id="fuzzing-example-with-vulnserver--spike-on-trun-command"&gt;Fuzzing: example with vulnserver + spike on TRUN command&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-console" data-lang="console"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cat &amp;gt; trun.spk &amp;lt;&amp;lt;EOF
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;s_readline();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;s_string(&amp;#34;TRUN &amp;#34;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;s_string_variable(&amp;#34;COMMAND&amp;#34;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;EOF
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, start wireshark filtering on the target IP/PORT below and run the &lt;code&gt;trun.spk&lt;/code&gt;:&lt;/p&gt;</description></item></channel></rss>